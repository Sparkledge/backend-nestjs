// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL2")
}

model User{
    id String @default(uuid()) @id
    email String @unique
    firstName String
    lastName String
    password String
    isVerified Boolean @default(false)
    temporaryToken String?
    refreshToken String?
    documents Document[]
    comments Comment[]
    reports Report[]
    viewedDocuments String[]
    registeredBy RegisteredBy @default(EMAIL)

}

model University{
  id Int @default(autoincrement()) @id
  name String
  //tables
  faculties Faculty[]
  programmes Programme[]
  courses Course[]
  documents Document[]
}
model Faculty{
  id Int @default(autoincrement()) @id
  name String
  university University @relation(fields:[universityId],references:[id])
  universityId Int
  //tables
  programmes Programme[]
  courses Course[]
  documents Document[]
}
model Programme{
  id Int @default(autoincrement()) @id
  name String
  faculty Faculty @relation(fields:[facultyId],references:[id])
  facultyId Int
  university University @relation(fields:[universityId],references:[id])
  universityId Int
  //tables
  courses Course[]
  documents Document[]
}
model Course{
  id Int @default(autoincrement()) @id
  name String
  semester Int
  courseType CourseType 
  degree Degree 
  programme Programme @relation(fields:[programmeId],references:[id])
  programmeId Int
  faculty Faculty @relation(fields:[facultyId],references:[id])
  facultyId Int
  university University @relation(fields:[universityId],references:[id])
  universityId Int
  //Tables
  documents Document[]

}

model Document{
  id Int @default(autoincrement()) @id
  title String
  description String 
  course Course @relation(fields:[courseId],references:[id])
  courseId Int
  programme Programme @relation(fields:[programmeId],references:[id])
  programmeId Int
  faculty Faculty @relation(fields:[facultyId],references:[id])
  facultyId Int
  university University @relation(fields:[universityId],references:[id])
  universityId Int
  user User @relation(fields:[userId],references:[id])
  userId String
  file File @relation(fields:[fileId],references: [id])
  fileId Int
  viewsNumber Int @default(0)
  likesNumber Int @default(0)
  likesList String[]
  comments Comment[]
  reports Report[]
  createdAt DateTime @default(now()) 

}
model File{
    id Int @default(autoincrement()) @id
    key String @unique
    documents Document[]
}

 enum CourseType {
  FACULTATIVE
  OBLIGATORY
}

 enum Degree {
  BACHELOR
  MASTER
  PHD
}

model Comment{
  id Int @default(autoincrement()) @id
  content String
  author User @relation(fields:[userId],references:[id])
  userId String
  document Document @relation(fields:[documentId],references: [id])
  documentId Int 
  likesNumber Int @default(0)
  createdAt DateTime @default(now())  
}
model Report{
  id String @default(uuid()) @id
  reportType ReportType
  personReporting User @relation(fields:[userId],references:[id])
  userId String
  documentReported Document @relation(fields:[documentId],references:[id])
  documentId Int
  content String @default("no-content")
  createdAt DateTime @default(now()) 
}
model Moderators{
  id String @default(uuid()) @id
  email String @unique

}
enum RegisteredBy {
  EMAIL
  GOOGLE
}

enum ReportType {
  MINECOPYRIGHTSVIOLATION
  SOMEONESCOPYRIGHTSVIOLATION
  HATEFULCONTENT
  INAPPROPRIATECONTENT
  SEXUALCONTENT
  OTHER
}

